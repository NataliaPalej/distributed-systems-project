package trip;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.InitialContext;
import javax.sql.DataSource;
import javax.ws.rs.core.Context;

public class DBInitializer {
	private static DataSource dataSource;

    static {
        try {
            Context ctx = (Context) new InitialContext();
            dataSource = (DataSource) ((InitialContext) ctx).lookup("java:comp/env/jdbc/travelDB");
            createTables();
        } catch (Exception e) {
            throw new RuntimeException("Database initialization failed!", e);
        }
    }

    // Create Trips table if it doesnâ€™t exist
    private static void createTables() {
        String tripsTable = "CREATE TABLE IF NOT EXISTS Trips ("
                + "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                + "destination VARCHAR(100) NOT NULL, "
                + "start_date DATE NOT NULL, "
                + "end_date DATE NOT NULL, "
                + "budget DECIMAL(10,2), "
                + "notes VARCHAR(255))";
        
        String activitiesTable = "CREATE TABLE IF NOT EXISTS Activities ("
                + "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                + "trip_id INTEGER NOT NULL, "
                + "name VARCHAR(100) NOT NULL, "
                + "time TIME NOT NULL, "
                + "location VARCHAR(100), "
                + "cost DECIMAL(10,2), "
                + "FOREIGN KEY (trip_id) REFERENCES Trips(id) ON DELETE CASCADE)";

        try (Connection conn = dataSource.getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(tripsTable);
            stmt.executeUpdate(activitiesTable);
            System.out.println("Database tables initialized successfully.");
        } catch (SQLException e) {
            System.err.println("Error initializing database.");
            e.printStackTrace();
        }
    }
}
